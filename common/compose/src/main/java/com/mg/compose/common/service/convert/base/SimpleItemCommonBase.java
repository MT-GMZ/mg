package com.mg.compose.common.service.convert.base;import com.mg.common.pojo.CommonData;import com.mg.common.pojo.CommonItem;import com.mg.common.pojo.SimpleItem;import com.mg.compose.common.service.convert.CommonItemUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.ArrayList;import java.util.List;public class SimpleItemCommonBase implements CommonItemUtils<SimpleItem> {	Logger logger = LoggerFactory.getLogger(getClass());		private CommonData toCommonData(SimpleItem pojo) {		CommonData data = new CommonData();		data.addParam("key",pojo.getKey());		data.addParam("title",pojo.getValue());		return data;	}		private SimpleItem toPojoData( CommonData data) {		SimpleItem pojo = new SimpleItem();		pojo.setKey(data.getString("key"));		pojo.setValue(data.getString("title"));		return pojo;	}		@Override	public CommonItem toCommon(SimpleItem pojo) {		return success(toCommonData(pojo));	}		@Override	public  CommonItem toCommon(List<SimpleItem> pojos) {		List<CommonData> result = new ArrayList();		for(SimpleItem item : pojos){			result.add(toCommonData(item));		}		return success(result);	}		@Override	public SimpleItem toPojo(CommonItem item) throws Exception{		checkCommonItem(item);		List<CommonData> datas = item.getDatas();		if(datas ==null||datas.size()==0){logger.debug("CommonItem 中data数据为空!!"); return null;}		if(datas.size()>1){logger.debug("CommonItem 中data数据不止一条数据!!"); }		return toPojoData(datas.get(0));	}		@Override	public List<SimpleItem> toPojoList(CommonItem item) throws Exception{		checkCommonItem(item);		List<SimpleItem> result = new ArrayList();			List<CommonData> datas = item.getDatas();			for(CommonData data : datas){				result.add(toPojoData(data));			}			return result;		}		}